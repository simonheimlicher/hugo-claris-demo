# Workflow for building and deploying this Hugo site to Cloudflare Pages
name: Deploy Hugo site to Cloudflare Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
      - stage

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# Cancel in-progress runs as we don't want to allow stale production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job: build `public` directory to be deployed
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      HUGO_VERSION: 0.121.1
      # Define the branch name variable
      BRANCH_NAME: ${{ github.ref_name }}

    steps:

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install or fetch node modules from cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci

      - name: Fetch resources from cache
        uses: actions/cache@v3
        with:
          path: resources
          key: ${{ runner.os }}-hugo-resources-${{ env.BRANCH_NAME }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-hugo-resources-${{ env.BRANCH_NAME }}-
            ${{ runner.os }}-hugo-resources-main- # Fallback to main branch cache

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          HUGO_CLARIS_AUTHOR_EMAIL: ${{ secrets.HUGO_CLARIS_AUTHOR_EMAIL }}
        run: hugo --gc --minify

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: public-${{ env.BRANCH_NAME }}

          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: public

          # The desired behavior if no files are found using the provided path.
          # Available Options:
          #   warn: Output a warning but do not fail the action
          #   error: Fail the action with an error message
          #   ignore: Do not output any warnings or errors, the action does not fail
          # Optional. Default is 'warn'
          if-no-files-found: error

          # Duration after which artifact will expire in days. 0 means using default retention.
          # Minimum 1 day.
          # Maximum 90 days unless changed from the repository settings page.
          # Optional. Defaults to repository settings.
          retention-days: 90

          # The level of compression for Zlib to be applied to the artifact archive.
          # The value can range from 0 to 9.
          # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
          # Optional. Default is '6'
          compression-level: 0

  # Deploy job: deploy `public` directory
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    env:
      # Define the branch name variable
      BRANCH_NAME: ${{ github.ref_name }}

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stage'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          # Name of the artifact to download.
          # If unspecified, all artifacts for the run are downloaded.
          # Optional.
          name: public-${{ env.BRANCH_NAME }}

          # Destination path. Supports basic tilde expansion.
          # Optional. Default is $GITHUB_WORKSPACE
          path: public

          # A glob pattern to the artifacts that should be downloaded.
          # Ignored if name is specified.
          # Optional.
          # pattern:

          # When multiple artifacts are matched, this changes the behavior of the destination directories.
          # If true, the downloaded artifacts will be in the same directory specified by path.
          # If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
          # Optional. Default is 'false'
          # merge-multiple:

          # The GitHub token used to authenticate with the GitHub API.
          # This is required when downloading artifacts from a different repository or from a different workflow run.
          # Optional. If unspecified, the action will download artifacts from the current repo and the current workflow run.
          # github-token:

          # The repository owner and the repository name joined together by "/".
          # If github-token is specified, this is the repository that artifacts will be downloaded from.
          # Optional. Default is ${{ github.repository }}
          # repository:

          # The id of the workflow run where the desired download artifact was uploaded from.
          # If github-token is specified, this is the run that artifacts will be downloaded from.
          # Optional. Default is ${{ github.run_id }}
          # run-id:

      - name: Deploy to Cloudflare Pages
        if: github.ref == 'refs/heads/main'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ vars.CLOUDFLARE_PROJECT_NAME }}
          directory: public
          # Optional: Enable this if you want to have GitHub Deployments triggered
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Switch what branch you are publishing to.
          # By default this will be the branch which triggered this workflow
          # branch: main
          # Optional: Change the working directory
          # workingDirectory: .
          # Optional: Change the Wrangler version, allows you to point to a specific version or a tag such as `beta`
          # Use the newly released Wrangler v3 with the wranglerVersion property
          wranglerVersion: '3'

      - name: Deploy to Cloudflare Pages (Staging)
        if: github.ref == 'refs/heads/stage'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_STAGE_ACCOUNT_ID }}
          projectName: ${{ vars.CLOUDFLARE_STAGE_PROJECT_ID }}
          directory: public
          # Optional: Enable this if you want to have GitHub Deployments triggered
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Switch what branch you are publishing to.
          # By default this will be the branch which triggered this workflow
          # branch: main
          # Optional: Change the working directory
          # workingDirectory: .
          # Optional: Change the Wrangler version, allows you to point to a specific version or a tag such as `beta`
          # Use the newly released Wrangler v3 with the wranglerVersion property
          wranglerVersion: '3'
